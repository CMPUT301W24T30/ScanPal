package com.example.scanpal;

import android.graphics.Bitmap;
import android.graphics.Color;
import android.util.Log;

import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageMetadata;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;

/**
 * Handles QR Code generation and aids in storing QR Codes
 */

public class QrCodeController {

    private final FirebaseFirestore database;
    private final FirebaseStorage storage;

    /**
     * Constructs an EventController with a reference to a Firestore database.
     */
    public QrCodeController() {
        database = FirebaseFirestore.getInstance();
        storage = FirebaseStorage.getInstance();
    }
    /**
     * Generates a qr code and returns in in the form of a bitmap
     *
     * @param data A string of the event id which the qr code will encode
     * @return A bitmap representing the qr code
     */

    public static Bitmap generate(String data) {
        int width = 300;
        int height = 300;

        Map<EncodeHintType, Object> hints = new HashMap<>();
        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
        hints.put(EncodeHintType.CHARACTER_SET, "UTF-8");

        try {
            QRCodeWriter qrCodeWriter = new QRCodeWriter();
            BitMatrix bitMatrix = qrCodeWriter.encode(data, BarcodeFormat.QR_CODE, width, height, hints);

            Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
            for (int x = 0; x < width; x++) {
                for (int y = 0; y < height; y++) {
                    bitmap.setPixel(x, y, bitMatrix.get(x, y) ? Color.BLACK : Color.WHITE);
                }
            }
            return bitmap;

        } catch (WriterException e) {
            // Handle the exception
            System.err.println("Error generating QR Code for event ");
            return null;
        }
    }

    /**
     * Converts a Bitmap to a byte array
     *
     * @param bitmap The Bitmap to convert
     * @return A byte array representing the Bitmap
     */

    public static byte[] bitmapToByteArray(Bitmap bitmap) {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream);
        return stream.toByteArray();
    }

    /**
     * Generates and Qr Code in Database
     *
     * @param event The event to link to
     * @param eventMap the map of the event as stored in the database
     * @param isCustom gives controller info on what to make the check-in qr code (custom or autogenerated)
     */
    public void generateAndStoreQrCode(Event event, Map<String, Object> eventMap, Boolean isCustom) {
        // Creating bitmap for qrcode and add it to event
        Bitmap qr_to_event = QrCodeController.generate("event-" + event.getId());
        event.setQrToEvent(qr_to_event);

        // Storing the bitmap into firebase by converting into byte array
        assert qr_to_event != null;
        byte[] imageDataEvent = QrCodeController.bitmapToByteArray(qr_to_event);

        // Creating bitmap for qrcode check-in
        Bitmap qr_to_checkin = null;
        if (isCustom) {
            qr_to_checkin = QrCodeController.generate("https://" + event.getId());
        } else {
            qr_to_checkin = QrCodeController.generate("check-in-" + event.getId());
        }
        event.setQrToCheckIn(qr_to_checkin);

        // Storing the bitmap into firebase by converting into byte array
        assert qr_to_checkin != null;
        byte[] imageDataCheckin = QrCodeController.bitmapToByteArray(qr_to_checkin);

        // upload qr code images
        StorageMetadata metadata = new StorageMetadata.Builder()
                .setContentType("image/png")
                .build();
        StorageReference storageRef = storage.getReference();
        DocumentReference eventRef = database.collection("Events").document(event.getId());

        // Save to database
        eventRef.set(eventMap)
                .addOnSuccessListener(aVoid -> {
                    Log.d("EventController", "Event added successfully!");
                    StorageReference checkInQRCodeRef = storageRef.child("qr-codes/" + event.getId() + "-check-in.png");
                    StorageReference eventQRCodeRef = storageRef.child("qr-codes/" + event.getId() + "-event.png");
                    // StorageReference eventPosterRef = storageRef.child("/" + event.getId() +
                    // "-poster.jpg");//TODO: checking img types?
                    UploadTask uploadTask = checkInQRCodeRef.putBytes(imageDataCheckin, metadata);
                    uploadTask
                            .addOnFailureListener(exception -> Log.e("FirebaseStorage",
                                    "Failed to upload check in qr code: " + exception.getMessage()))
                            .addOnSuccessListener(taskSnapshot -> taskSnapshot.getStorage().getDownloadUrl().addOnSuccessListener(uri -> {
                                eventMap.put("checkInQRCodeUrl", uri.toString());
                                // Save to database
                                eventRef.update("checkInQRCodeURL", uri);
                            }).addOnFailureListener(exception -> Log.e("FirebaseStorage",
                                    "Failed to get download url for check in qr code" + exception.getMessage())));
                    uploadTask = eventQRCodeRef.putBytes(imageDataEvent, metadata);
                    uploadTask
                            .addOnFailureListener(exception -> Log.e("FirebaseStorage",
                                    "Failed to upload event qr code: " + exception.getMessage()))

                            .addOnSuccessListener(taskSnapshot -> taskSnapshot.getStorage().getDownloadUrl().addOnSuccessListener(uri -> {
                                eventMap.put("eventQRCodeUrl", uri.toString());
                                // Save to database
                                eventRef.update("eventQRCodeURL", uri);
                            }).addOnFailureListener(exception -> Log.e("FirebaseStorage",
                                    "Failed to get download url for event qr code" + exception.getMessage())));
                })
                .addOnFailureListener(e -> Log.d("EventController", "Error adding event: " + e.getMessage()));
    }
}

